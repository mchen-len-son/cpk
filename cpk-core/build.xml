<project name="cpk-core" basedir="." default="jar"
         xmlns:ivy="antlib:org.apache.ivy.ant">
  <description>
    This build file is used to create the cpk-core project
    and works with the subflool file.
  </description>

 <property file="../override.properties"
            description="Top level Properties customized for your development environment belong in this file.  This file will never be checked into the SCM." />
  <property file="../build.properties"
            description="Top level Properties customized for your particular project belong in this file." />

  <import file="../build-res/subfloor.xml"/>
  
  <property name="plugin.name"
            value="cpk-core"
            description="Name of the plugin"/>
  <property name="resource.dir"
            value="res"
            description="Name of the resource directory"/>
  <property name="stage.dir"
            value="${bin.dir}/stage"
            description="Name of the resource directory"/>
  <property name="samples.stage.dir"
            value="${bin.dir}/stage-samples"
            description="Name of the resource directory" />
  <property name="runtimelib.dir"
            value="${basedir}/runtime-lib"
            description="Directory that hosts Jar files required to run project source.  (IVY will populate this directory with required jars)" />
  <tstamp/>
  <path id="classpath">
    <fileset dir="${devlib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${lib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${runtimelib.dir}">
      <include name="**/*.jar" />
    </fileset>
  </path>
  
  
  
  <!-- Build the project.revision property -->
  <property name="distribution.version" value="${project.stage}-${project.version}"/>
  <echo>distribution.version = ${distribution.version}</echo>
  <target name="dist" depends="clean,resolve,test,dist-plugin"/>
  <target name="dist-compile" depends="jar,dist-plugin"/>
  <property name="plugin.artifact.id" value="${plugin.name}"/>
  <property name="plugin.zipfile" value="${plugin.artifact.id}-${distribution.version}.zip"/>
  <property name="plugin.samples.zipfile" value="${plugin.artifact.id}-samples-${distribution.version}.zip"/>
  <property name="plugin.solution.zipfile" value="${plugin.artifact.id}-solution-${distribution.version}.zip"/>


  <target name="publish" depends="dist, dist-source, cobertura, publish-nojar">
    </target>

  <!--=======================================================================
              dist
              Creates a distribution of this project's plugin zip
              ====================================================================-->
  <!--<target name="assemble" depends="assemble.init,install-antcontrib, dist-plugin"/>-->
  <target name="dist-plugin" depends="jar" description="Creates a distribution">
    <!-- delete and re-create the plugin dist folder tree -->
    <mkdir dir="${stage.dir}"/>
    <mkdir dir="${stage.dir}/${plugin.name}"/>
    <mkdir dir="${stage.dir}/${plugin.name}/lib"/>
    <!-- copy the plugin jar to the plugin dist lib folder -->
    <copy todir="${stage.dir}/${plugin.name}/lib" overwrite="true">
      <fileset dir="${dist.dir}">
        <include name="${ivy.artifact.id}-${project.revision}.jar"/>
      </fileset>
      <fileset dir="${devlib.dir}">
        <include name="**/*.jar"/>
      </fileset>
  <fileset dir="runtime-lib">
        <include name="**/*.jar"/>
        <exclude name="**/batik-js-1.7.jar"/>
      </fileset>
    </copy>
    <!-- Copy the plugin.xml and any other files from the resource dir -->
    <!--<copy todir="${stage.dir}/${plugin.name}" overwrite="true">
      <fileset dir="${resource.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>-->

    <!-- copy resources from cpk source -->
    <copy todir="${stage.dir}/${plugin.name}">
      <fileset dir="${resource.dir}"/>
    </copy>

    <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
      <fileset dir="${basedir}">
        <include name="readme.txt"/>
      </fileset>
    </copy>
    <!-- create the version file -->
	<tstamp/>			
	<property name="sequential.build.id" value="manual-${DSTAMP}"/>

    <!-- create a zip file -->
    <zip zipfile="${dist.dir}/${plugin.zipfile}"
         basedir="${stage.dir}"
         includes="${plugin.name}/**/*"
         excludes="**/Thumbs.db"/>

    <move tofile="${dist.dir}/${ivy.artifact.id}-${project.revision}.zip" file="${dist.dir}/${plugin.zipfile}"/>


  </target>
  <!--=======================================================================
              install-plugin
              Installs the plugin locally
              ====================================================================-->
  <target name="install-plugin" depends="clean, jar, dist-plugin" description="Installs the plugin locally">
    <fail message="plugin.local.install.solutions.dir not set - cannot copy"
          unless="plugin.local.install.solutions.dir"/>
    <delete dir="${plugin.local.install.solutions.dir}/system/${plugin.name}"/>
    <copy todir="${plugin.local.install.solutions.dir}/system/${plugin.name}">
      <fileset dir="${stage.dir}/${plugin.name}">
        <include name="**/*"/>
      </fileset>
    </copy>
    <get src="http://127.0.0.1:8080/pentaho/Publish?publish=now&amp;class=org.pentaho.platform.plugin.services.pluginmgr.PluginAdapter&amp;userid=${plugin.local.install.user}&amp;password=${plugin.local.install.pass}"
         dest="${stage.dir}/blah.html"/>
  </target>
  <!-- Overriding resolve target so we can add resolve-dev -->
  <target name="resolve"
          depends="resolve-default, resolve-test, resolve-codegen, resolve-runtime, ivy.check-releasable"
          description="Retrieves all the dependent libraries" />
  <target name="resolve-runtime" depends="resolve-init">
    <ivy:resolve file="ivy.xml" conf="runtime" />
    <ivy:retrieve conf="runtime" pattern="runtime-lib/[module]-[revision](-[classifier]).[ext]" />
  </target>
  <target name="clean-jars">
    <delete dir="${lib.dir}" />
    <delete dir="${testlib.dir}" />
    <delete dir="${runtimelib.dir}" />
  </target>
</project>
